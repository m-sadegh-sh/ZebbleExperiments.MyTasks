/***********************************************
* GENERATED BY ZEBBLE
***********************************************/

using System;
using UI.Modules;
using UI.Pages;
using UI.Templates;
using Zebble;
using Zebble.Services;

namespace UI
{
    public class CssStyles
    {
        public static void LoadAll()
        {
            // ======================================================================
            // App.UI\Styles\Android.css---------------------------------------------

            if (CssEngine.Platform == DevicePlatform.Android)
            {
                CssEngine.Add(new File_App.UI.Styles.Android.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ButtonCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.IconButtonCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.IconButtonTextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.PopUpDialogCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.PopUpPageCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ModuleHeaderTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.NavigationBarTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TextInput_1CssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewListViewItemCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.ListViewListViewItemImageViewViewRowCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabActiveCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabLabelCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.TabsTabsTabIconCssRule());

                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchBarCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchToggleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCheckedToggleCssRule());
                CssEngine.Add(new File_App.UI.Styles.Android.SwitchCheckedBarCssRule());
            }

            // ======================================================================
            // App.UI\Styles\Common.css----------------------------------------------
            CssEngine.Add(new File_App.UI.Styles.Common.TextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ImageViewDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonDisabledCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.IconButtonTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PopUpTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ScrollViewRefreshingImageViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitingIndicatorCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.WaitingIndicatorImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogButtonsRowButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DialogButtonsRowButtonPrimaryButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ToastOKButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TextInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.CheckBoxCheckedImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SwitchCheckedBarCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListOptionsListOptionCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListOptionsListOptionLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.OptionsListOptionsListOptionCheckedLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PickerCaretCssRule());

            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.DatePickerCellActiveLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TimePickerCellActiveLabelCssRule());

            CssEngine.Add(new File_App.UI.Styles.Common.NavbarBackgroundCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarNavbarButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarBackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarBackIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarBackTextViewCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.NavigationBarMenuIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ModalCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MenuDisplayerCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MenuDisplayerOverlayCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabActiveCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.TabsTabsTabLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewEmptyTextLabelCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewViewRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewListViewItemTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewListViewItemCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewListViewItemStackCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.StandardListListViewListViewItemStackIconCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.SearchInputFocusTextBoxCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ModuleHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.ListViewModuleHeaderTitleCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.HeaderIntroCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.PrimaryButtonCssRule());

            CssEngine.Add(new File_App.UI.Styles.Common.DeleteButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.BottomButtonsRowCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.FormFieldHeaderCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuLogoImageCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuIconButtonCssRule());
            CssEngine.Add(new File_App.UI.Styles.Common.MainMenuIconButtonIconCssRule());

            // ======================================================================
            // App.UI\Styles\iOS.css-------------------------------------------------

            if (CssEngine.Platform == DevicePlatform.IOS)
            {
                CssEngine.Add(new File_App.UI.Styles.IOS.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.ModuleHeaderTitleCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.DialogCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.ModalCssRule());
                CssEngine.Add(new File_App.UI.Styles.IOS.PrimaryButtonCssRule());
            }

            // ======================================================================
            // App.UI\Styles\Windows.css---------------------------------------------

            if (CssEngine.Platform == DevicePlatform.Windows)
            {
                CssEngine.Add(new File_App.UI.Styles.Windows.TextViewCssRule());
                CssEngine.Add(new File_App.UI.Styles.Windows.TextInputCssRule());
                CssEngine.Add(new File_App.UI.Styles.Windows.ModuleHeaderTitleCssRule());
            }
        }
    }
}

namespace UI.Modules { }
namespace UI.Pages { }
namespace UI.Templates { }
namespace Zebble.Data { }
namespace Zebble.Plugin { }

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextInput")]
    [CssBody("font-family: Roboto;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Roboto";
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextView")]
    [CssBody("font-family: Roboto;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Roboto";
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Button")]
    [CssBody("text-transform: uppercase; height: 36px; border-radius: 4px;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.Height = 36;
            view.Css.Border.Radius = 4;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "IconButton")]
    [CssBody("text-transform: uppercase; height: 36px; border-radius: 4px;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.Height = 36;
            view.Css.Border.Radius = 4;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "IconButton #TextView")]
    [CssBody("text-transform: uppercase;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextTransform = TextTransform.Uppercase;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "PopUp Dialog")]
    [CssBody("border-radius: 4px;")]
    class PopUpDialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Border.Radius = 4;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "PopUp Page")]
    [CssBody("border-radius: 4px;")]
    class PopUpPageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Page

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Page)untypedView;
            view.Css.Border.Radius = 4;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", ".module-header-title")]
    [CssBody("font-size: 24px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Size = 24;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "NavigationBar #Title")]
    [CssBody("text-align: left; padding-left: 65px; font-size: 20px; font-weight: normal;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;
            view.Css.Padding.Left = 65;
            view.Css.Font.Size = 20;
            view.Css.Font.Bold = false;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "TextInput")]
    [CssBody("font-family: Roboto; border: 0 #e6e6e6; border-bottom-width: 1px; padding: 2px; margin-bottom: 10px;")]
    class TextInput_1CssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Roboto";
            view.Css.Border = new Border(0, "#e6e6e6");
            view.Css.Border.Bottom = 1;
            view.Css.Padding = 2;
            view.Css.Margin.Bottom = 10;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView")]
    [CssBody("padding-top: 8px;")]
    class ListViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ListView)untypedView;
            view.Css.Padding.Top = 8;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView ListViewItem")]
    [CssBody("height: 72px; padding-left: 10px; padding-right: 10px;")]
    class ListViewListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Height = 72;
            view.Css.Padding.Left = 10;
            view.Css.Padding.Right = 10;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "ListView ListViewItem ImageView.view-row")]
    [CssBody("display: none;")]
    class ListViewListViewItemImageViewViewRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ImageView && HasClass(view, "view-row"))) return false;

            view = CssEngine.FindParentByType<ListViewItem>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Ignored = true;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs")]
    [CssBody("height: auto;")]
    class TabsCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Tabs)untypedView;
            view.Css.Height = null;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab")]
    [CssBody("border: 0 #43aaa9; font-size: 14px; margin-bottom: 1px; height: 40px;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.Border = new Border(0, "#43aaa9");
            view.Css.Font.Size = 14;
            view.Css.Margin.Bottom = 1;
            view.Css.Height = 40;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab:active")]
    [CssBody("background-color: transparent; border-bottom-width: 2px;")]
    class TabsTabsTabActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Tabs.Tab && view.PseudoCssState.ContainsWholeWord("active"))) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = Colors.Transparent;
            view.Css.Border.Bottom = 2;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab #Label")]
    [CssBody("text-transform: uppercase; height: 100%; vertical-align: middle;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextTransform = TextTransform.Uppercase;
            view.Css.Height = 100.Percent();
            view.Css.TextAlignment = Alignment.Middle;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Tabs Tabs-Tab #Icon")]
    [CssBody("display: none;")]
    class TabsTabsTabIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Ignored = true;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch")]
    [CssBody("width: 50px;")]
    class SwitchCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Switch

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Switch)untypedView;
            view.Css.Width = 50;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch #Bar")]
    [CssBody("background: #C8C8C8; height: 14px; border-radius: 7px; margin-top: 6px; opacity: 1;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "#C8C8C8";
            view.Css.Height = 14;
            view.Css.Border.Radius = 7;
            view.Css.Margin.Top = 6;
            view.Css.Opacity = 1;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch #Toggle")]
    [CssBody("background: white; border-width: 1px; border-color: #C8C8C8; margin: 0;")]
    class SwitchToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = Colors.White;
            view.Css.Border.Width = 1;
            view.Css.Border.Color = "#C8C8C8";
            view.Css.Margin = 0;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch:checked #Toggle")]
    [CssBody("background: #43aaa9; border-color: transparent;")]
    class SwitchCheckedToggleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Toggle

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "#43aaa9";
            view.Css.Border.Color = Colors.Transparent;
        }
    }
}

namespace File_App.UI.Styles.Android
{
    [CssSelector(DevicePlatform.Android, "Styles\\Android.css", "Switch:checked #Bar")]
    [CssBody("opacity: 0.35; background: #43aaa9;")]
    class SwitchCheckedBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TextView")]
    [CssBody("color: black;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.TextColor = Colors.Black;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Button")]
    [CssBody("opacity: 1;")]
    class ButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Opacity = 1;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Button:disabled")]
    [CssBody("opacity: 0.3;")]
    class ButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.Opacity = 0.3f;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ImageView")]
    [CssBody("opacity: 1;")]
    class ImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Opacity = 1;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ImageView:disabled")]
    [CssBody("opacity: 0.3;")]
    class ImageViewDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is ImageView && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.Opacity = 0.3f;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton")]
    [CssBody("opacity: 1;")]
    class IconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Opacity = 1;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton:disabled")]
    [CssBody("opacity: 0.3;")]
    class IconButtonDisabledCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is IconButton && view.PseudoCssState.ContainsWholeWord("disabled"))) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Opacity = 0.3f;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "IconButton #TextView")]
    [CssBody("color: white;")]
    class IconButtonTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp")]
    [CssBody("margin-top: calc(\"(View.Root.ActualHeight - view.ActualHeight) / 2\");")]
    class PopUpCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: PopUp

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (PopUp)untypedView;
            view.Css.Margin.Top = (View.Root.ActualHeight - view.ActualHeight) / 2;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp #HeaderTitle")]
    [CssBody("font-size: 20px;")]
    class PopUpHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #HeaderTitle

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Size = 20;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "PopUp #Title")]
    [CssBody("font-size: 20px;")]
    class PopUpTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<PopUp>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Size = 20;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ScrollView #Refreshing ImageView")]
    [CssBody("background: url(\"Images/Icons/Spinner.gif\"); margin: 25px; height: 50px; width: 100%;")]
    class ScrollViewRefreshingImageViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ImageView

            view = CssEngine.FindParentById(view, "Refreshing");

            if (view == null) return false;

            view = CssEngine.FindParentByType<ScrollView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ImageView)untypedView;
            view.Css.BackgroundImage.Path = "Images/Icons/Spinner.gif";
            view.Css.Margin = 25;
            view.Css.Height = 50;
            view.Css.Width = 100.Percent();
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Waiting-Indicator")]
    [CssBody("margin-top: calc(\"(View.Root.ActualHeight - view.ActualHeight) / 2\");")]
    class WaitingIndicatorCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Waiting-Indicator

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Waiting.Indicator)untypedView;
            view.Css.Margin.Top = (View.Root.ActualHeight - view.ActualHeight) / 2;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Waiting-Indicator #Image")]
    [CssBody("background: url(\"Images/icons/Spinner.gif\");")]
    class WaitingIndicatorImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Image

            view = CssEngine.FindParentByType<Waiting.Indicator>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundImage.Path = "Images/icons/Spinner.gif";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #Title")]
    [CssBody("color: #43aaa9; font-size: 20px;")]
    class DialogTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";
            view.Css.Font.Size = 20;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #ButtonsRow Button")]
    [CssBody("color: #43aaa9;")]
    class DialogButtonsRowButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Button

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view == null) return false;

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Dialog #ButtonsRow Button.primary-button")]
    [CssBody("color: white;")]
    class DialogButtonsRowButtonPrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Button && HasClass(view, "primary-button"))) return false;

            view = CssEngine.FindParentById(view, "ButtonsRow");

            if (view == null) return false;

            view = CssEngine.FindParentByType<Dialog>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Button)untypedView;
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast")]
    [CssBody("background: white; Duration: calc(\"4.Seconds()\"); padding: 20px; background: #000;")]
    class ToastCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Toast

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Toast)untypedView;
            view.Css.BackgroundColor = Colors.White;
            view.Duration = 4.Seconds();
            view.Css.Padding = 20;
            view.Css.BackgroundColor = "#000";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast #Label")]
    [CssBody("color: #fff;")]
    class ToastLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Toast #OKButton")]
    [CssBody("color: #43aaa9;")]
    class ToastOKButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #OKButton

            view = CssEngine.FindParentByType<Toast>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TextInput")]
    [CssBody("padding: 7px;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Padding = 7;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "CheckBox #CheckedImage")]
    [CssBody("background-color: #43aaa9;")]
    class CheckBoxCheckedImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #CheckedImage

            view = CssEngine.FindParentByType<CheckBox>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Switch #Bar")]
    [CssBody("background: #C8C8C8;")]
    class SwitchBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            view = CssEngine.FindParentByType<Switch>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "#C8C8C8";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Switch:checked #Bar")]
    [CssBody("background: #43aaa9;")]
    class SwitchCheckedBarCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Bar

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is Switch && view.PseudoCssState.ContainsWholeWord("checked")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList OptionsList-Option")]
    [CssBody("margin-top: 6px;")]
    class OptionsListOptionsListOptionCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: OptionsList-Option

            view = CssEngine.FindParentByType<OptionsList>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (OptionsList.Option)untypedView;
            view.Css.Margin.Top = 6;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList OptionsList-Option #Label")]
    [CssBody("color: black;")]
    class OptionsListOptionsListOptionLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<OptionsList.Option>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<OptionsList>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.Black;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "OptionsList OptionsList-Option:checked #Label")]
    [CssBody("color: #43aaa9;")]
    class OptionsListOptionsListOptionCheckedLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is OptionsList.Option && view.PseudoCssState.ContainsWholeWord("checked")) break;
            }

            view = CssEngine.FindParentByType<OptionsList>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Picker")]
    [CssBody("padding: 7px; border-color: #e6e6e6;")]
    class PickerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Picker

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Picker)untypedView;
            view.Css.Padding = 7;
            view.Css.Border.Color = "#e6e6e6";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Picker #Caret")]
    [CssBody("background: url(\"Images/Icons/Caret.png\");")]
    class PickerCaretCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Caret

            view = CssEngine.FindParentByType<Picker>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundImage.Path = "Images/Icons/Caret.png";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "DatePicker-Cell #Label")]
    [CssBody("color: #C8C8C8;")]
    class DatePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<DatePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TimePicker-Cell #Label")]
    [CssBody("color: #C8C8C8;")]
    class TimePickerCellLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<TimePicker.Cell>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "DatePicker-Cell:active #Label")]
    [CssBody("color: black;")]
    class DatePickerCellActiveLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is DatePicker.Cell && view.PseudoCssState.ContainsWholeWord("active")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.Black;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "TimePicker-Cell:active #Label")]
    [CssBody("color: black;")]
    class TimePickerCellActiveLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is TimePicker.Cell && view.PseudoCssState.ContainsWholeWord("active")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.Black;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".navbar-background")]
    [CssBody("background: linear-gradient(to bottom, #43aaa9, #196e6d);")]
    class NavbarBackgroundCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .navbar-background

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundColor = "linear-gradient(to bottom, #43aaa9, #196e6d)";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar #Title")]
    [CssBody("color: white;")]
    class NavigationBarTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Title

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .navbar-button")]
    [CssBody("width: 40px; height: 40px; color: white;")]
    class NavigationBarNavbarButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .navbar-button

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Width = 40;
            view.Css.Height = 40;
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .back")]
    [CssBody("color: white; width: 48px; padding: 0;")]
    class NavigationBarBackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .back

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.White;
            view.Css.Width = 48;
            view.Css.Padding = 0;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .back #Icon")]
    [CssBody("height: 80%; background: url(\"Images/Icons/Back.png\"); padding: 7px 0;")]
    class NavigationBarBackIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByCssClass(view, "back");

            if (view == null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Height = 80.Percent();
            view.Css.BackgroundImage.Path = "Images/Icons/Back.png";
            view.Css.Padding = new Gap(vertical: 7, horizontal: 0);
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .back #TextView")]
    [CssBody("text-align: right;")]
    class NavigationBarBackTextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextView

            view = CssEngine.FindParentByCssClass(view, "back");

            if (view == null) return false;

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Right;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "NavigationBar .menu-icon")]
    [CssBody("background: url(\"Images/Icons/Burger.png\"); height: 40px; margin: 0;")]
    class NavigationBarMenuIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .menu-icon

            view = CssEngine.FindParentByType<NavigationBar>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundImage.Path = "Images/Icons/Burger.png";
            view.Css.Height = 40;
            view.Css.Margin = 0;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Modal")]
    [CssBody("background: white; padding: 20px; height: auto;")]
    class ModalCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Modal

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Modal)untypedView;
            view.Css.BackgroundColor = Colors.White;
            view.Css.Padding = 20;
            view.Css.Height = null;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MenuDisplayer")]
    [CssBody("position: absolute; width: 100%; height: 100%; MenuWidth: 250px;")]
    class MenuDisplayerCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: MenuDisplayer

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (MenuDisplayer)untypedView;
            view.Css.Absolute = true;
            view.Css.Width = 100.Percent();
            view.Css.Height = 100.Percent();
            view.MenuWidth = 250;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MenuDisplayer #Overlay")]
    [CssBody("width: 100%; height: 100%; opacity: 0.35; background: black;")]
    class MenuDisplayerOverlayCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Overlay

            view = CssEngine.FindParentByType<MenuDisplayer>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Width = 100.Percent();
            view.Css.Height = 100.Percent();
            view.Css.Opacity = 0.35f;
            view.Css.BackgroundColor = Colors.Black;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab")]
    [CssBody("background-color: transparent;")]
    class TabsTabsTabCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Tabs-Tab

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = Colors.Transparent;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab:active")]
    [CssBody("background-color: #43aaa9;")]
    class TabsTabsTabActiveCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            if (!(view is Tabs.Tab && view.PseudoCssState.ContainsWholeWord("active"))) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Tabs.Tab)untypedView;
            view.Css.BackgroundColor = "#43aaa9";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "Tabs Tabs-Tab #Label")]
    [CssBody("color: #eeeeee;")]
    class TabsTabsTabLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Label

            view = CssEngine.FindParentByType<Tabs.Tab>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<Tabs>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#eeeeee";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView #EmptyTextLabel")]
    [CssBody("color: #C8C8C8;")]
    class ListViewEmptyTextLabelCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #EmptyTextLabel

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#C8C8C8";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView .view-row")]
    [CssBody("width: 20px; height: 100%;")]
    class ListViewViewRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .view-row

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Width = 20;
            view.Css.Height = 100.Percent();
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView ListViewItem")]
    [CssBody("border-color: #e6e6e6;")]
    class ListViewListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Border.Color = "#e6e6e6";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "ListView ListViewItem .title")]
    [CssBody("font-weight: bold; height: 50%;")]
    class ListViewListViewItemTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .title

            view = CssEngine.FindParentByType<ListViewItem>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Bold = true;
            view.Css.Height = 50.Percent();
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListView ListViewItem")]
    [CssBody("height: 60px;")]
    class StandardListListViewListViewItemCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: ListViewItem

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (ListViewItem)untypedView;
            view.Css.Height = 60;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListView ListViewItem > Stack > *")]
    [CssBody("height: 100%;")]
    class StandardListListViewListViewItemStackCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            view = view.parent;

            if (view == null) return false;
            else if (!(view is Stack)) return false;

            view = view.parent;

            if (view == null) return false;
            else if (!(view is ListViewItem)) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Height = 100.Percent();
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".standard-list ListView ListViewItem > Stack .icon")]
    [CssBody("width: 60px; margin-right: 10px;")]
    class StandardListListViewListViewItemStackIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .icon

            view = CssEngine.FindParentByType<Stack>(view);

            if (view == null) return false;

            view = view.parent;

            if (view == null) return false;
            else if (!(view is ListViewItem)) return false;

            view = CssEngine.FindParentByType<ListView>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByCssClass(view, "standard-list");

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Width = 60;
            view.Css.Margin.Right = 10;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput")]
    [CssBody("margin-bottom: 5px;")]
    class SearchInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: SearchInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (SearchInput)untypedView;
            view.Css.Margin.Bottom = 5;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput #TextBox")]
    [CssBody("text-align: center;")]
    class SearchInputTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            view = CssEngine.FindParentByType<SearchInput>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Middle;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "SearchInput:focus #TextBox")]
    [CssBody("text-align: left;")]
    class SearchInputFocusTextBoxCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #TextBox

            while (true)
            {
                view = view.parent;

                if (view == null) return false;
                else if (view is SearchInput && view.PseudoCssState.ContainsWholeWord("focus")) break;
            }

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextAlignment = Alignment.Left;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".module-header-title")]
    [CssBody("color: #43aaa9; margin-bottom: 20px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#43aaa9";
            view.Css.Margin.Bottom = 20;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".list-view .module-header-title")]
    [CssBody("padding: 5px; padding-right: 20px; height: 40px;")]
    class ListViewModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            view = CssEngine.FindParentByCssClass(view, "list-view");

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Padding = 5;
            view.Css.Padding.Right = 20;
            view.Css.Height = 40;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".header-intro")]
    [CssBody("color: #888888; margin-bottom: 20px;")]
    class HeaderIntroCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .header-intro

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = "#888888";
            view.Css.Margin.Bottom = 20;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".primary-button")]
    [CssBody("color: white; background: #43aaa9;")]
    class PrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .primary-button

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#43aaa9";
        }
    }
}


namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".delete-button")]
    [CssBody("height: 100%; margin: 0; color: white; background: #ff4c32; width: 70px;")]
    class DeleteButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .delete-button

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Height = 100.Percent();
            view.Css.Margin = 0;
            view.Css.TextColor = Colors.White;
            view.Css.BackgroundColor = "#ff4c32";
            view.Css.Width = 70;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".bottom-buttons-row")]
    [CssBody("margin-top: 5px; margin-bottom: 5px;")]
    class BottomButtonsRowCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .bottom-buttons-row

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Margin.Top = 5;
            view.Css.Margin.Bottom = 5;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", ".form-field-header")]
    [CssBody("padding: 7px; font-weight: bold; font-size: 16px;")]
    class FormFieldHeaderCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .form-field-header

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Padding = 7;
            view.Css.Font.Bold = true;
            view.Css.Font.Size = 16;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu")]
    [CssBody("background: #282828;")]
    class MainMenuCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: MainMenu

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (MainMenu)untypedView;
            view.Css.BackgroundColor = "#282828";
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu #LogoImage")]
    [CssBody("height: 90px; width: 100%; margin-bottom: 10px; margin-top: 10px;")]
    class MainMenuLogoImageCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #LogoImage

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Height = 90;
            view.Css.Width = 100.Percent();
            view.Css.Margin.Bottom = 10;
            view.Css.Margin.Top = 10;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu IconButton")]
    [CssBody("height: 50px; border-bottom-width: 1px; border-color: #505050; color: white;")]
    class MainMenuIconButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: IconButton

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (IconButton)untypedView;
            view.Css.Height = 50;
            view.Css.Border.Bottom = 1;
            view.Css.Border.Color = "#505050";
            view.Css.TextColor = Colors.White;
        }
    }
}

namespace File_App.UI.Styles.Common
{
    [CssSelector("Styles\\Common.css", "MainMenu IconButton #Icon")]
    [CssBody("background-size: contain; margin-top: 7px; height: 25px; width: 30px; margin-left: 10px;")]
    class MainMenuIconButtonIconCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: #Icon

            view = CssEngine.FindParentByType<IconButton>(view);

            if (view == null) return false;

            view = CssEngine.FindParentByType<MainMenu>(view);

            if (view == null) return false;

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.BackgroundImage.Stretch = Stretch.Fit;
            view.Css.Margin.Top = 7;
            view.Css.Height = 25;
            view.Css.Width = 30;
            view.Css.Margin.Left = 10;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "TextInput")]
    [CssBody("font-family: Arial;")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Arial";
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "TextView")]
    [CssBody("font-family: Arial;")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Arial";
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", ".module-header-title")]
    [CssBody("font-size: 24px; font-weight: bold;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Size = 24;
            view.Css.Font.Bold = true;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "Dialog")]
    [CssBody("border-radius: 15px;")]
    class DialogCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Dialog

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Dialog)untypedView;
            view.Css.Border.Radius = 15;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", "Modal")]
    [CssBody("border-radius: 15px;")]
    class ModalCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: Modal

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (Modal)untypedView;
            view.Css.Border.Radius = 15;
        }
    }
}

namespace File_App.UI.Styles.IOS
{
    [CssSelector(DevicePlatform.IOS, "Styles\\iOS.css", ".primary-button")]
    [CssBody("border-radius: 5px;")]
    class PrimaryButtonCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .primary-button

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Border.Radius = 5;
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", "TextView")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextViewCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextView

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextView)untypedView;
            view.Css.Font.Name = "Segoe UI";
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", "TextInput")]
    [CssBody("font-family: \"Segoe UI\";")]
    class TextInputCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: TextInput

            return true;
        }

        public override void Apply(View untypedView)
        {
            var view = (TextInput)untypedView;
            view.Css.Font.Name = "Segoe UI";
        }
    }
}

namespace File_App.UI.Styles.Windows
{
    [CssSelector(DevicePlatform.Windows, "Styles\\Windows.css", ".module-header-title")]
    [CssBody("font-size: 40px;")]
    class ModuleHeaderTitleCssRule : CssRule
    {
        public override bool Matches(View view)
        {
            // CssEngine will only call me if a view matches: .module-header-title

            return true;
        }

        public override void Apply(View view)
        {
            view.Css.Font.Size = 40;
        }
    }
}